name: CI/CD Pipeline for LCA-Cost-NHMzh

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies for test setup
        run: |
          python -m pip install --upgrade pip
          pip install pandas

      - name: Set up test data
        run: python scripts/setup_ci_test_data.py

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: lca-cost-nhmzh:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Start MinIO for testing
        run: docker compose up -d minio1

      - name: Wait for MinIO to start
        run: sleep 10

      - name: Initialize MinIO bucket
        run: |
          # Run the initialization script if it exists
          if [ -f scripts/init_minio.py ]; then
            docker run --network nhm-network -v $(pwd):/app --env-file .env lca-cost-nhmzh:test python /app/scripts/init_minio.py
          else
            echo "MinIO initialization script not found, continuing..."
          fi

      - name: Run tests
        run: |
          docker run --network nhm-network -v $(pwd):/app --env-file .env lca-cost-nhmzh:test python -m pytest /app/tests -v

      - name: Login to Docker Hub
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push production image
        if: success() && github.event_name != 'pull_request'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/lca-cost-nhmzh:latest,${{ secrets.DOCKER_HUB_USERNAME }}/lca-cost-nhmzh:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-test
    if: success() && github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            docker compose pull
            docker compose up -d

      - name: Notify deployment success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Deployment Successful
          SLACK_MESSAGE: "LCA-Cost-NHMzh has been successfully deployed to production!"
          SLACK_FOOTER: "GitHub Actions"

  notify-failure:
    needs: [build-and-test, deploy]
    if: failure()
    runs-on: ubuntu-latest

    steps:
      - name: Notify build or deployment failure
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Build or Deployment Failed
          SLACK_MESSAGE: "LCA-Cost-NHMzh build or deployment failed. Please check the logs."
          SLACK_FOOTER: "GitHub Actions"
